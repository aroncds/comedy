{   ; contract Store

    (include "utils/macros.lll")
    (include "utils/owner.lll")
    (include "utils/math.lll")

    ; Storage layout
    (def 'owner 0x00)
    (def 'token 0x01)
    (def 'buy 0x02)
    (def 'sell 0x03)
    (def 'paused 0x04)
    (def 'unitsToPay (address) address)

    ; Memory Layout
    (def 'call-func 0x00)
    (def 'call-data 0x20)
    (def 'call-data1 0x40)
    (def 'call-result 0x40)

    ; Scratch
    (def 'scratch0 0x60)
    (def 'scratch1 0x80)

    ; Functions ids
    (def 'buy 0xa6f2ae3a) ; buy()
    (def 'withdraw-ether 0x7362377b) ; withdrawEther()
    (def 'withdraw-token 0x50baa622) ; withdrawToken(uint256)
    (def 'transfered 0x093f4320) ; _transfered(address,uint256)

    ; Token Function Ids
    (def 'transfer-id 0xa9059cbb)

    ; Events
    (def 'buy-event ; Buy(address,uint256)
        0xe3d4187f6ca4248660cc0ac8b8056515bac4a8132be2eca31d6d0cc170722a7e)
    (def 'withdraw-event ; Withdraw(adress,uint256)
        0x85017931eb9da51c61da7d7ab740bc6b9410c6ac198ca51ef8a351b2f134f668)
    
    (def 'set-buy (min price)
        (sstore buy (or (shl min 128) price)))
    
    (def 'get-buy-min (shr @@buy 128))
    (def 'get-buy-price (and @@buy (mask 128)))

    (def 'set-sell (min price)
        (sstore sell (or (shl min 128) price)))

    (def 'get-sell-min (shr @@sell 128))
    (def 'get-sell-price (and @@sell (mask 128)))
    
    (def 'set-token (address) (sstore token address))

    (def 'transfer-token (address amount) {
        ;(mstore call-func transfer-id)
        (mstore call-data address)
        (mstore call-data1 amount)
        (call allgas @@token 0 call-data 0x40 call-result 0x20)
    })

    (def 'balance-of (address) {
        (mstore call-data address)
        (staticcall allgas @@token call-data 0x20 call-result 0x20)
        (mload call-result)
    })

    (def 'is-token-sender
        (unless (= (caller) @@token) revert))
    
    (def 'when-not-paused (when (~ @@paused) revert))

    (set-owner (caller))
    (set-token $0x00)
    (set-buy 100 100000000000000)
    (set-sell 150 80000000000000)

    (returnlll { uses-function
        (function buy { payable when-not-paused
            (mstore scratch0 (/ (callvalue) get-buy-price))
            (when (>= @scratch0 get-buy-min) revert)
            (when (>= (balance-of (address)) @scratch0) revert)
            (transfer-token (caller) @scratch0)
            (mstore call-result @scratch0)
            (events2 buy-event (caller))
        })

        (function withdraw-ether { not-payable
            (mstore scratch0 @@(unitsToPay (caller)))
            (when (< @scratch0 get-sell-min) revert)
            (when (< (balance (address)) 0) revert)
            (mstore scratch1 (* @scratch0 get-sell-price))
            
            (if (S< (balance (caller)) @scratch1)
                (sstore (unitsToPay (caller)) 0)
                {
                    (mstore scratch1 (- @scratch1 (balance (address))))
                    (sstore (unitsToPay (caller)) (- @@(unitsToPay (caller)) @scratch1))
                })
            
            (send (caller) @scratch1)
            (mstore call-result @scratch1)
            (events2 withdraw-event (caller))
        })

        (function withdraw-token { has-one-arg not-payable
            (mstore scratch0 (unitsToPay (caller)))
            (mstore scratch1 $0x04)
            (when (< @scratch1 @scratch0) revert)
            (sstore (unitsToPay (caller)) (- @scratch0 @scratch1))
            (transfer-token (caller) @scratch1)
            (mstore call-result @scratch1)
            (events2 withdraw-event (caller))
        })

        (function transfered { is-token-sender
            (mstore scratch0 $0x04)
            (mstore scratch1 $0x24)
            (sstore (unitsToPay @scratch0) (+ @@(unitsToPay @scratch0) @scratch1))
        })

        not-payable
        (jump invalid-location)
    })
}