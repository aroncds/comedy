{   ; contract Store

    (include "utils/macros.lll")
    (include "utils/owner.lll")
    (include "utils/math.lll")
    (include "utils/pausable.lll")

    ; Storage layout
    (def 'owner 0x00)
    (def 'token 0x01)
    (def 'wallet 0x02)
    (def 'buy 0x03)
    (def 'sell 0x04)
    (def 'etherToPay (address) address)

    ; Memory Layout
    (def 'call-func 0x00)
    (def 'call-data 0x04)
    (def 'call-data1 0x24)
    (def 'call-data2 0x44)
    (def 'call-result 0x00)

    ; Scratch
    (def 'scratch0 0x60)
    (def 'scratch1 0x80)

    ; Arguments
    (def 'arg1 0x04)
    (def 'arg2 0x24)
    (def 'arg3 0x44)

    ; Functions ids
    (def 'buy 0xa6f2ae3a) ; buy()
    (def 'sell 0xe4849b32) ; sell(uint256)
    (def 'withdraw 0x3ccfd60b) ; withdraw()
    (def 'kill 0xcbf0b0c0) ; kill(address)

    (def 'set-wallet-id 0xdeaa59df) ; setWallet(address)
    (def 'set-token-id 0x144fa6d7) ; setToken(address)
    (def 'set-buy-price-id 0x63ae8d6c) ; setBuyPrice(uint256)
    (def 'set-sell-price-id 0xfc6634b9) ; setSellPrice(uint256)
    (def 'set-pause 0xbedb86fb) ; setPause(bool)

    (def 'get-buy-price-id 0x8620410b) ; buyPrice()
    (def 'get-buy-min-id 0x4dbc9a1c) ; buyMin()
    (def 'get-sell-price-id 0x4b750334) ; sellPrice()
    (def 'get-sell-min-id 0xed17c876) ; sellMin()

    ; Token Function Ids
    (def 'balance-of-id 0x70a08231) ; balanceOf(address)
    (def 'transfer-from-id 0x23b872dd) ; transferFrom(address,address,uint256)

    ; Wallet Function Ids
    (def 'capture-tokens-id 0xcbf27cdd) ; captureTokens(address,uint256)
    (def 'send-ether-id 0xc1756a2c) ; sendEther(address,uint256)

    ; Events
    (def 'buy-event ; Buy(address,uint256)
        0xe3d4187f6ca4248660cc0ac8b8056515bac4a8132be2eca31d6d0cc170722a7e)
    (def 'sell-event ; Sell(address,uint256)
        0x5e5e995ce3133561afceaa51a9a154d5db228cd7525d34df5185582c18d3df09)
    (def 'withdraw-event ; Withdraw(adress,uint256)
        0x85017931eb9da51c61da7d7ab740bc6b9410c6ac198ca51ef8a351b2f134f668)
    
    ; Buy
    (def 'set-buy (min price)
        (sstore buy (or (shl min 128) price)))
    
    (def 'get-buy-min (shr @@buy 128))
    (def 'get-buy-price (and @@buy (shr (mask 128) 128)))

    ; Sell
    (def 'set-sell (min price)
        (sstore sell (or (shl min 128) price)))

    (def 'get-sell-min (shr @@sell 128))
    (def 'get-sell-price (and @@sell (shr (mask 128) 128)))
    
    (def 'set-token (address) (sstore token address))
    (def 'set-wallet (address) (sstore wallet address))

    ; Token Functions
    (def 'token-transfer-from (from to amount) {
        (mstore call-func transfer-from-id)
        (mstore call-data from)
        (mstore call-data1 to)
        (mstore call-data2 amount)
        (call allgas @@token 0 call-func 0x64 call-result 0x20)
        (unless @call-result revert)
    })

    (def 'token-balance-of (address) {
        (mstore call-func balance-of-id)
        (mstore call-data address)
        (staticcall allgas @@token call-func 0x20 call-result 0x20)
        @call-result
    })

    ; Wallet Functions
    (def 'wallet-capture-tokens (address units) {
        (mstore call-func capture-tokens-id)
        (mstore call-data address)
        (mstore call-data1 units)
        (call allgas @@wallet 0 call-func 0x44 call-result 0x20)
        (unless @call-result revert)
    })

    (def 'wallet-send-ether (address units) {
        (mstore call-func send-ether-id)
        (mstore call-data address)
        (mstore call-data1 units)
        (call allgas @@wallet 0 call-func 0x44 call-result 0x20)
        (unless @call-result revert)
    })

    (codecopy scratch0 (bytecodesize) 0x20)
    (codecopy scratch1 (+ (bytecodesize) 0x20) 0x20)

    ; Constructor
    (set-owner (caller))
    (set-token @scratch0)
    (set-wallet @scratch1)
    (set-buy 100 100000000000000)
    (set-sell 150 80000000000000)

    (returnlll { uses-function

        (function buy { payable when-not-paused
            (mstore scratch0 (div-safe (callvalue) get-buy-price))
            (mstore scratch1 @@wallet)
        
            (when (< @scratch0 get-buy-min) revert)
            (when (< (token-balance-of @scratch1) @scratch0) revert)

            (send @scratch1 (callvalue))
            (token-transfer-from @scratch1 (caller) @scratch0)

            (mstore call-result @scratch0)
            (events2 buy-event (caller))
            
            (mstore call-result true)
            (return call-result 0x20)
        })

        (function sell { has-one-arg when-not-paused
            (mstore scratch0 $arg1)
            (wallet-capture-tokens (caller) @scratch0)
            
            (sstore (etherToPay (caller)) (mul-safe get-sell-price @scratch0))
            
            (events2 sell-event (caller))

            (mstore call-result true)
            (return call-result 0x20)
        })

        (function withdraw { when-not-paused
            (mstore scratch0 @@(etherToPay (caller)))
            (when (< (balance @@wallet) @scratch0) revert)
    
            (sstore (etherToPay (caller)) 0)
            (wallet-send-ether (caller) @scratch0)
            (events2 withdraw-event (caller))

            (mstore call-result true)
            (return call-result 0x20)
        })

        (function set-buy-price-id { has-one-arg when-paused only-owner
            (set-buy get-buy-min $arg1)
        })

        (function set-sell-price-id { has-one-arg when-paused only-owner
            (set-sell get-sell-min $arg1)
        })

        (function set-pause { has-one-arg only-owner
            (set-paused $arg1)
        })

        (function get-buy-price-id {
            (mstore scratch0 get-buy-price)
            (return scratch0 0x20)
        })

        (function get-buy-min-id {
            (mstore scratch0 get-buy-min)
            (return scratch0 0x20)
        })

        (function get-sell-price-id {
            (mstore scratch0 get-sell-price)
            (return scratch0 0x20)
        })

        (function get-sell-min-id {
            (mstore scratch0 get-sell-min)
            (return scratch0 0x20)
        })

        (function kill { has-one-arg only-owner
            (is-address $arg1)
            (selfdestruct $arg1)
        })

        not-payable
        (jump invalid-location)
    })
}
